import random
import timeit
import numpy as np
import matplotlib.pyplot as plt

#Set a seed of random numbers
random.seed(35)  

#Set the right shift by k positions
def random_rotate(A):
    k = 3
    return A[-k:] + A[:-k]

def pre_experiment(n):
    A = sorted(random.sample(range(1, 1000010), n))
    A = random_rotate(A)
    return A

#Finding Max Number In Circular Shifted Array
def FindingMaxNumberInCircularShiftedArray(A):
    low, high = 0, len(A) - 1
    if A[low] <= A[high]:
        return A[high]
    while low <= high:
        mid = (low + high) // 2
        if mid < len(A) - 1 and A[mid] > A[mid + 1]:
            return A[mid]
        if mid > 0 and A[mid - 1] > A[mid]:
            return A[mid - 1]
        if A[low] <= A[mid]:
            low = mid + 1
        else:
            high = mid - 1

    return -1  

#Calculate only the time for the part of the search for the maximum value
def experimental_time_for(n):
    A = pre_experiment(n)
    select_time = timeit.timeit(lambda: FindingMaxNumberInCircularShiftedArray(A))
    #Getting the time to find the maximum part
    return select_time* 1e9  #Converting seconds to nanoseconds


def theoretical_result(n):
    return np.log2(n)

#n_values
n_values  =  [ 10,50,100,150,1000 ,1500,10000,15000,100000,150000 ]
experimental_times = []
theoretical_times = []

for n in n_values:
    experimental_time = experimental_time_for(n)
    theoretical_time = theoretical_result(n)
    
    experimental_times.append(experimental_time)
    theoretical_times.append(theoretical_time)

average_experimental_time = np.mean(experimental_times)
average_theoretical_time = np.mean(theoretical_times)

#Setting constants to adjust the theoretical time
scaling_constant = average_experimental_time / average_theoretical_time

adjusted_theoretical_times = [t * scaling_constant for t in theoretical_times]

#Printing the graph and the form
print("n\tExperimental (ns)\tTheoretical\tAdjusted Theoretical")
for i in range(len(n_values)):
    print(f"{n_values[i]}\t{experimental_times[i]:.2f}\t\t{theoretical_times[i]:.2f}\t\t{adjusted_theoretical_times[i]:.2f}")

plt.figure(figsize=(10, 6))
plt.plot(n_values, experimental_times, label="Experimental Results", color="red")
plt.plot(n_values, adjusted_theoretical_times, label="Adjusted Theoretical Results", color="blue")
plt.xlabel("n")
plt.ylabel("Time (ns)")
plt.legend()
plt.title("Experimental Results vs Adjusted Theoretical Results")
plt.grid(True)
plt.show()
